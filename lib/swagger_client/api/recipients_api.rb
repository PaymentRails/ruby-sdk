=begin
#Payment Rails API

#No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.30.12

Generated by: https://github.com/swagger-api/swagger-codegen.git

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=end

require "uri"

module SwaggerClient
  class RecipientsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # 
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [RecipientPost] :body 
    # @return [Recipient]
    def create(opts = {})
      data, _status_code, _headers = create_with_http_info(opts)
      return data
    end

    # 
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [RecipientPost] :body 
    # @return [Array<(Recipient, Fixnum, Hash)>] Recipient data, response status code and response headers
    def create_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RecipientsApi.create ..."
      end
      # resource path
      local_var_path = "/v1/recipients".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = []
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['merchantKey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Recipient')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RecipientsApi#create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Delete multiple recipients
    # @param [Hash] opts the optional parameters
    # @option opts [Ids] :ids an array of valid recipient&#39;s id
    # @return [nil]
    def delete(opts = {})
      delete_with_http_info(opts)
      return nil
    end

    # 
    # Delete multiple recipients
    # @param [Hash] opts the optional parameters
    # @option opts [Ids] :ids an array of valid recipient&#39;s id
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RecipientsApi.delete ..."
      end
      # resource path
      local_var_path = "/v1/recipients".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = []
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'ids'])
      auth_names = ['merchantKey']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RecipientsApi#delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page page number default 1
    # @option opts [Integer] :page_size page size default 100
    # @option opts [String] :start_date filter recipients list by creation date from start date format YYYY-MM-DD
    # @option opts [String] :end_date filter recipients list by creation date to end date format YYYY-MM-DD
    # @option opts [String] :status filter recipients list by status
    # @option opts [String] :compliance_status filter recipients list by compliance status
    # @option opts [String] :payout_method filter recipients list by payout methods
    # @option opts [String] :payout_currency filter recipients list by payout currency 3 letters ISO code
    # @option opts [String] :country filter recipients list by country
    # @return [nil]
    def export_csv(opts = {})
      export_csv_with_http_info(opts)
      return nil
    end

    # 
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page page number default 1
    # @option opts [Integer] :page_size page size default 100
    # @option opts [String] :start_date filter recipients list by creation date from start date format YYYY-MM-DD
    # @option opts [String] :end_date filter recipients list by creation date to end date format YYYY-MM-DD
    # @option opts [String] :status filter recipients list by status
    # @option opts [String] :compliance_status filter recipients list by compliance status
    # @option opts [String] :payout_method filter recipients list by payout methods
    # @option opts [String] :payout_currency filter recipients list by payout currency 3 letters ISO code
    # @option opts [String] :country filter recipients list by country
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def export_csv_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RecipientsApi.export_csv ..."
      end
      # resource path
      local_var_path = "/v1/recipients/exports.csv".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'startDate'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'endDate'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?
      query_params[:'complianceStatus'] = opts[:'compliance_status'] if !opts[:'compliance_status'].nil?
      query_params[:'payoutMethod'] = opts[:'payout_method'] if !opts[:'payout_method'].nil?
      query_params[:'payoutCurrency'] = opts[:'payout_currency'] if !opts[:'payout_currency'].nil?
      query_params[:'country'] = opts[:'country'] if !opts[:'country'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['text/csv']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['merchantKey']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RecipientsApi#export_csv\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Return recipients
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page page number default 1
    # @option opts [Integer] :page_size page size default 100
    # @option opts [String] :start_date filter recipients list by creation date from start date format YYYY-MM-DD
    # @option opts [String] :end_date filter recipients list by creation date to end date format YYYY-MM-DD
    # @option opts [String] :status filter recipients list by status multiple values separated by coma
    # @option opts [String] :compliance_status filter recipients list by compliance status multiple values separated by comas
    # @option opts [String] :payout_method filter recipients list by payout methods multiple values separated by comas
    # @option opts [String] :payout_currency filter recipients list by payout currency 3 letters ISO code, multiple values separated by comas
    # @option opts [String] :country filter recipients list by country multiple values separated by comas
    # @return [Object]
    def query(opts = {})
      data, _status_code, _headers = query_with_http_info(opts)
      return data
    end

    # 
    # Return recipients
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page page number default 1
    # @option opts [Integer] :page_size page size default 100
    # @option opts [String] :start_date filter recipients list by creation date from start date format YYYY-MM-DD
    # @option opts [String] :end_date filter recipients list by creation date to end date format YYYY-MM-DD
    # @option opts [String] :status filter recipients list by status multiple values separated by coma
    # @option opts [String] :compliance_status filter recipients list by compliance status multiple values separated by comas
    # @option opts [String] :payout_method filter recipients list by payout methods multiple values separated by comas
    # @option opts [String] :payout_currency filter recipients list by payout currency 3 letters ISO code, multiple values separated by comas
    # @option opts [String] :country filter recipients list by country multiple values separated by comas
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def query_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RecipientsApi.query ..."
      end
      # resource path
      local_var_path = "/v1/recipients".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'startDate'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'endDate'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?
      query_params[:'complianceStatus'] = opts[:'compliance_status'] if !opts[:'compliance_status'].nil?
      query_params[:'payoutMethod'] = opts[:'payout_method'] if !opts[:'payout_method'].nil?
      query_params[:'payoutCurrency'] = opts[:'payout_currency'] if !opts[:'payout_currency'].nil?
      query_params[:'country'] = opts[:'country'] if !opts[:'country'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = []
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['merchantKey']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RecipientsApi#query\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param file the csv file
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def upload_csv(file, opts = {})
      upload_csv_with_http_info(file, opts)
      return nil
    end

    # 
    # 
    # @param file the csv file
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def upload_csv_with_http_info(file, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RecipientsApi.upload_csv ..."
      end
      # verify the required parameter 'file' is set
      fail ArgumentError, "Missing the required parameter 'file' when calling RecipientsApi.upload_csv" if file.nil?
      # resource path
      local_var_path = "/v1/recipients/upload".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = []
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}
      form_params["file"] = file

      # http body (model)
      post_body = nil
      auth_names = ['merchantKey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RecipientsApi#upload_csv\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
