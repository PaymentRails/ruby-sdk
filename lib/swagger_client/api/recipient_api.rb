=begin
#Payment Rails API

#No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.30.12

Generated by: https://github.com/swagger-api/swagger-codegen.git

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=end

require "uri"

module SwaggerClient
  class RecipientApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # 
    # create paypal account
    # @param recipient_id 
    # @param body paypal payout account
    # @param [Hash] opts the optional parameters
    # @return [PaypalAccount]
    def creat_paypal_account(recipient_id, body, opts = {})
      data, _status_code, _headers = creat_paypal_account_with_http_info(recipient_id, body, opts)
      return data
    end

    # 
    # create paypal account
    # @param recipient_id 
    # @param body paypal payout account
    # @param [Hash] opts the optional parameters
    # @return [Array<(PaypalAccount, Fixnum, Hash)>] PaypalAccount data, response status code and response headers
    def creat_paypal_account_with_http_info(recipient_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RecipientApi.creat_paypal_account ..."
      end
      # verify the required parameter 'recipient_id' is set
      fail ArgumentError, "Missing the required parameter 'recipient_id' when calling RecipientApi.creat_paypal_account" if recipient_id.nil?
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling RecipientApi.creat_paypal_account" if body.nil?
      # resource path
      local_var_path = "/v1/recipients/{recipientId}/payout-methods/accounts/paypal".sub('{format}','json').sub('{' + 'recipientId' + '}', recipient_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = []
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['merchantKey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PaypalAccount')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RecipientApi#creat_paypal_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # create bank account
    # @param recipient_id 
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [BankAccount]
    def create_bank_account(recipient_id, body, opts = {})
      data, _status_code, _headers = create_bank_account_with_http_info(recipient_id, body, opts)
      return data
    end

    # 
    # create bank account
    # @param recipient_id 
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BankAccount, Fixnum, Hash)>] BankAccount data, response status code and response headers
    def create_bank_account_with_http_info(recipient_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RecipientApi.create_bank_account ..."
      end
      # verify the required parameter 'recipient_id' is set
      fail ArgumentError, "Missing the required parameter 'recipient_id' when calling RecipientApi.create_bank_account" if recipient_id.nil?
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling RecipientApi.create_bank_account" if body.nil?
      # resource path
      local_var_path = "/v1/recipients/{recipientId}/payout-methods/accounts/bank".sub('{format}','json').sub('{' + 'recipientId' + '}', recipient_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = []
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['merchantKey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BankAccount')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RecipientApi#create_bank_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # create recipient payout methods
    # @param recipient_id R-XXXXXXXXXXXXXXXX
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [RecipientPayoutMethods]
    def create_payout_methods(recipient_id, body, opts = {})
      data, _status_code, _headers = create_payout_methods_with_http_info(recipient_id, body, opts)
      return data
    end

    # 
    # create recipient payout methods
    # @param recipient_id R-XXXXXXXXXXXXXXXX
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RecipientPayoutMethods, Fixnum, Hash)>] RecipientPayoutMethods data, response status code and response headers
    def create_payout_methods_with_http_info(recipient_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RecipientApi.create_payout_methods ..."
      end
      # verify the required parameter 'recipient_id' is set
      fail ArgumentError, "Missing the required parameter 'recipient_id' when calling RecipientApi.create_payout_methods" if recipient_id.nil?
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling RecipientApi.create_payout_methods" if body.nil?
      # resource path
      local_var_path = "/v1/recipients/{recipientId}/payout-methods".sub('{format}','json').sub('{' + 'recipientId' + '}', recipient_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = []
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['merchantKey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RecipientPayoutMethods')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RecipientApi#create_payout_methods\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param recipient_id R-XXXXXXXXXXXXXXXX
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete(recipient_id, opts = {})
      delete_with_http_info(recipient_id, opts)
      return nil
    end

    # 
    # 
    # @param recipient_id R-XXXXXXXXXXXXXXXX
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_with_http_info(recipient_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RecipientApi.delete ..."
      end
      # verify the required parameter 'recipient_id' is set
      fail ArgumentError, "Missing the required parameter 'recipient_id' when calling RecipientApi.delete" if recipient_id.nil?
      # resource path
      local_var_path = "/v1/recipients/{recipientId}".sub('{format}','json').sub('{' + 'recipientId' + '}', recipient_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = []
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['merchantKey']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RecipientApi#delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param recipient_id R-XXXXXXXXXXXXXXXX
    # @param [Hash] opts the optional parameters
    # @return [Recipient]
    def get(recipient_id, opts = {})
      data, _status_code, _headers = get_with_http_info(recipient_id, opts)
      return data
    end

    # 
    # 
    # @param recipient_id R-XXXXXXXXXXXXXXXX
    # @param [Hash] opts the optional parameters
    # @return [Array<(Recipient, Fixnum, Hash)>] Recipient data, response status code and response headers
    def get_with_http_info(recipient_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RecipientApi.get ..."
      end
      # verify the required parameter 'recipient_id' is set
      fail ArgumentError, "Missing the required parameter 'recipient_id' when calling RecipientApi.get" if recipient_id.nil?
      # resource path
      local_var_path = "/v1/recipients/{recipientId}".sub('{format}','json').sub('{' + 'recipientId' + '}', recipient_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = []
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['merchantKey']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Recipient')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RecipientApi#get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # create bank account
    # @param recipient_id 
    # @param [Hash] opts the optional parameters
    # @return [BankAccount]
    def get_bank_account(recipient_id, opts = {})
      data, _status_code, _headers = get_bank_account_with_http_info(recipient_id, opts)
      return data
    end

    # 
    # create bank account
    # @param recipient_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BankAccount, Fixnum, Hash)>] BankAccount data, response status code and response headers
    def get_bank_account_with_http_info(recipient_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RecipientApi.get_bank_account ..."
      end
      # verify the required parameter 'recipient_id' is set
      fail ArgumentError, "Missing the required parameter 'recipient_id' when calling RecipientApi.get_bank_account" if recipient_id.nil?
      # resource path
      local_var_path = "/v1/recipients/{recipientId}/payout-methods/accounts/bank".sub('{format}','json').sub('{' + 'recipientId' + '}', recipient_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = []
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['merchantKey']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BankAccount')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RecipientApi#get_bank_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param recipient_id 
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2002]
    def get_compliance_checks(recipient_id, opts = {})
      data, _status_code, _headers = get_compliance_checks_with_http_info(recipient_id, opts)
      return data
    end

    # 
    # 
    # @param recipient_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2002, Fixnum, Hash)>] InlineResponse2002 data, response status code and response headers
    def get_compliance_checks_with_http_info(recipient_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RecipientApi.get_compliance_checks ..."
      end
      # verify the required parameter 'recipient_id' is set
      fail ArgumentError, "Missing the required parameter 'recipient_id' when calling RecipientApi.get_compliance_checks" if recipient_id.nil?
      # resource path
      local_var_path = "/v1/recipients/{recipientId}/compliance".sub('{format}','json').sub('{' + 'recipientId' + '}', recipient_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = []
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['merchantKey']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2002')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RecipientApi#get_compliance_checks\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param recipient_id R-XXXXXXXXXXXXXXXX
    # @param [Hash] opts the optional parameters
    # @return [RecipientInfoOut]
    def get_info(recipient_id, opts = {})
      data, _status_code, _headers = get_info_with_http_info(recipient_id, opts)
      return data
    end

    # 
    # 
    # @param recipient_id R-XXXXXXXXXXXXXXXX
    # @param [Hash] opts the optional parameters
    # @return [Array<(RecipientInfoOut, Fixnum, Hash)>] RecipientInfoOut data, response status code and response headers
    def get_info_with_http_info(recipient_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RecipientApi.get_info ..."
      end
      # verify the required parameter 'recipient_id' is set
      fail ArgumentError, "Missing the required parameter 'recipient_id' when calling RecipientApi.get_info" if recipient_id.nil?
      # resource path
      local_var_path = "/v1/recipients/{recipientId}/info".sub('{format}','json').sub('{' + 'recipientId' + '}', recipient_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = []
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['merchantKey']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RecipientInfoOut')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RecipientApi#get_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param recipient_id R-XXXXXXXXXXXXXX
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2003]
    def get_logs(recipient_id, opts = {})
      data, _status_code, _headers = get_logs_with_http_info(recipient_id, opts)
      return data
    end

    # 
    # 
    # @param recipient_id R-XXXXXXXXXXXXXX
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2003, Fixnum, Hash)>] InlineResponse2003 data, response status code and response headers
    def get_logs_with_http_info(recipient_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RecipientApi.get_logs ..."
      end
      # verify the required parameter 'recipient_id' is set
      fail ArgumentError, "Missing the required parameter 'recipient_id' when calling RecipientApi.get_logs" if recipient_id.nil?
      # resource path
      local_var_path = "/v1/recipients/{recipientId}/logs".sub('{format}','json').sub('{' + 'recipientId' + '}', recipient_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = []
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['merchantKey']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2003')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RecipientApi#get_logs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param recipient_id R-XXXXXXXXXXXXXXXX
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page set page number default 1
    # @option opts [Integer] :page_size set page size default 100
    # @option opts [String] :status filter recipient payment by status
    # @option opts [String] :start_date filter recipient payment creation date from date
    # @option opts [String] :end_date filter recipient payment creation date to date
    # @option opts [String] :source_currency filter recipient payments by source currency, 3 letters ISO code
    # @option opts [String] :search search payments using key words, payment ids, names
    # @return [InlineResponse2004]
    def get_payments(recipient_id, opts = {})
      data, _status_code, _headers = get_payments_with_http_info(recipient_id, opts)
      return data
    end

    # 
    # 
    # @param recipient_id R-XXXXXXXXXXXXXXXX
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page set page number default 1
    # @option opts [Integer] :page_size set page size default 100
    # @option opts [String] :status filter recipient payment by status
    # @option opts [String] :start_date filter recipient payment creation date from date
    # @option opts [String] :end_date filter recipient payment creation date to date
    # @option opts [String] :source_currency filter recipient payments by source currency, 3 letters ISO code
    # @option opts [String] :search search payments using key words, payment ids, names
    # @return [Array<(InlineResponse2004, Fixnum, Hash)>] InlineResponse2004 data, response status code and response headers
    def get_payments_with_http_info(recipient_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RecipientApi.get_payments ..."
      end
      # verify the required parameter 'recipient_id' is set
      fail ArgumentError, "Missing the required parameter 'recipient_id' when calling RecipientApi.get_payments" if recipient_id.nil?
      # resource path
      local_var_path = "/v1/recipients/{recipientId}/payments".sub('{format}','json').sub('{' + 'recipientId' + '}', recipient_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?
      query_params[:'startDate'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'endDate'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'sourceCurrency'] = opts[:'source_currency'] if !opts[:'source_currency'].nil?
      query_params[:'search'] = opts[:'search'] if !opts[:'search'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = []
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['merchantKey']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2004')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RecipientApi#get_payments\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param recipient_id R-XXXXXXXXXXXXXXXX
    # @param [Hash] opts the optional parameters
    # @return [RecipientPayoutMethods]
    def get_payout_methods(recipient_id, opts = {})
      data, _status_code, _headers = get_payout_methods_with_http_info(recipient_id, opts)
      return data
    end

    # 
    # 
    # @param recipient_id R-XXXXXXXXXXXXXXXX
    # @param [Hash] opts the optional parameters
    # @return [Array<(RecipientPayoutMethods, Fixnum, Hash)>] RecipientPayoutMethods data, response status code and response headers
    def get_payout_methods_with_http_info(recipient_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RecipientApi.get_payout_methods ..."
      end
      # verify the required parameter 'recipient_id' is set
      fail ArgumentError, "Missing the required parameter 'recipient_id' when calling RecipientApi.get_payout_methods" if recipient_id.nil?
      # resource path
      local_var_path = "/v1/recipients/{recipientId}/payout-methods".sub('{format}','json').sub('{' + 'recipientId' + '}', recipient_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = []
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['merchantKey']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RecipientPayoutMethods')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RecipientApi#get_payout_methods\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # get paypal account for recipient
    # @param recipient_id 
    # @param [Hash] opts the optional parameters
    # @return [PaypalAccount]
    def get_paypal_account(recipient_id, opts = {})
      data, _status_code, _headers = get_paypal_account_with_http_info(recipient_id, opts)
      return data
    end

    # 
    # get paypal account for recipient
    # @param recipient_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PaypalAccount, Fixnum, Hash)>] PaypalAccount data, response status code and response headers
    def get_paypal_account_with_http_info(recipient_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RecipientApi.get_paypal_account ..."
      end
      # verify the required parameter 'recipient_id' is set
      fail ArgumentError, "Missing the required parameter 'recipient_id' when calling RecipientApi.get_paypal_account" if recipient_id.nil?
      # resource path
      local_var_path = "/v1/recipients/{recipientId}/payout-methods/accounts/paypal".sub('{format}','json').sub('{' + 'recipientId' + '}', recipient_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = []
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['merchantKey']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PaypalAccount')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RecipientApi#get_paypal_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param recipient_id R-XXXXXXXXXXXXXXXX
    # @param [Hash] opts the optional parameters
    # @option opts [RecipientPost] :body 
    # @return [Recipient]
    def update(recipient_id, opts = {})
      data, _status_code, _headers = update_with_http_info(recipient_id, opts)
      return data
    end

    # 
    # 
    # @param recipient_id R-XXXXXXXXXXXXXXXX
    # @param [Hash] opts the optional parameters
    # @option opts [RecipientPost] :body 
    # @return [Array<(Recipient, Fixnum, Hash)>] Recipient data, response status code and response headers
    def update_with_http_info(recipient_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RecipientApi.update ..."
      end
      # verify the required parameter 'recipient_id' is set
      fail ArgumentError, "Missing the required parameter 'recipient_id' when calling RecipientApi.update" if recipient_id.nil?
      # resource path
      local_var_path = "/v1/recipients/{recipientId}".sub('{format}','json').sub('{' + 'recipientId' + '}', recipient_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = []
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['merchantKey']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Recipient')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RecipientApi#update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # create bank account
    # @param recipient_id 
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [BankAccount]
    def update_bank_account(recipient_id, body, opts = {})
      data, _status_code, _headers = update_bank_account_with_http_info(recipient_id, body, opts)
      return data
    end

    # 
    # create bank account
    # @param recipient_id 
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BankAccount, Fixnum, Hash)>] BankAccount data, response status code and response headers
    def update_bank_account_with_http_info(recipient_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RecipientApi.update_bank_account ..."
      end
      # verify the required parameter 'recipient_id' is set
      fail ArgumentError, "Missing the required parameter 'recipient_id' when calling RecipientApi.update_bank_account" if recipient_id.nil?
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling RecipientApi.update_bank_account" if body.nil?
      # resource path
      local_var_path = "/v1/recipients/{recipientId}/payout-methods/accounts/bank".sub('{format}','json').sub('{' + 'recipientId' + '}', recipient_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = []
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['merchantKey']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BankAccount')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RecipientApi#update_bank_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param recipient_id R-XXXXXXXXXXXXXXXX
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [RecipientInfoOut]
    def update_info(recipient_id, body, opts = {})
      data, _status_code, _headers = update_info_with_http_info(recipient_id, body, opts)
      return data
    end

    # 
    # 
    # @param recipient_id R-XXXXXXXXXXXXXXXX
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RecipientInfoOut, Fixnum, Hash)>] RecipientInfoOut data, response status code and response headers
    def update_info_with_http_info(recipient_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RecipientApi.update_info ..."
      end
      # verify the required parameter 'recipient_id' is set
      fail ArgumentError, "Missing the required parameter 'recipient_id' when calling RecipientApi.update_info" if recipient_id.nil?
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling RecipientApi.update_info" if body.nil?
      # resource path
      local_var_path = "/v1/recipients/{recipientId}/info".sub('{format}','json').sub('{' + 'recipientId' + '}', recipient_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = []
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['merchantKey']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RecipientInfoOut')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RecipientApi#update_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # create recipient payout methods
    # @param recipient_id R-XXXXXXXXXXXXXXXX
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [RecipientPayoutMethods]
    def update_payout_methods(recipient_id, body, opts = {})
      data, _status_code, _headers = update_payout_methods_with_http_info(recipient_id, body, opts)
      return data
    end

    # 
    # create recipient payout methods
    # @param recipient_id R-XXXXXXXXXXXXXXXX
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RecipientPayoutMethods, Fixnum, Hash)>] RecipientPayoutMethods data, response status code and response headers
    def update_payout_methods_with_http_info(recipient_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RecipientApi.update_payout_methods ..."
      end
      # verify the required parameter 'recipient_id' is set
      fail ArgumentError, "Missing the required parameter 'recipient_id' when calling RecipientApi.update_payout_methods" if recipient_id.nil?
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling RecipientApi.update_payout_methods" if body.nil?
      # resource path
      local_var_path = "/v1/recipients/{recipientId}/payout-methods".sub('{format}','json').sub('{' + 'recipientId' + '}', recipient_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = []
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['merchantKey']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RecipientPayoutMethods')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RecipientApi#update_payout_methods\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # create paypal account
    # @param recipient_id 
    # @param body paypal payout account
    # @param [Hash] opts the optional parameters
    # @return [PaypalAccount]
    def update_paypal_account(recipient_id, body, opts = {})
      data, _status_code, _headers = update_paypal_account_with_http_info(recipient_id, body, opts)
      return data
    end

    # 
    # create paypal account
    # @param recipient_id 
    # @param body paypal payout account
    # @param [Hash] opts the optional parameters
    # @return [Array<(PaypalAccount, Fixnum, Hash)>] PaypalAccount data, response status code and response headers
    def update_paypal_account_with_http_info(recipient_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RecipientApi.update_paypal_account ..."
      end
      # verify the required parameter 'recipient_id' is set
      fail ArgumentError, "Missing the required parameter 'recipient_id' when calling RecipientApi.update_paypal_account" if recipient_id.nil?
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling RecipientApi.update_paypal_account" if body.nil?
      # resource path
      local_var_path = "/v1/recipients/{recipientId}/payout-methods/accounts/paypal".sub('{format}','json').sub('{' + 'recipientId' + '}', recipient_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = []
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['merchantKey']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PaypalAccount')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RecipientApi#update_paypal_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
